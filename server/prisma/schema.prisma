// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  name          String
  password      String?
  role          Role           @default(USER)
  isVerified    Boolean        @default(false)
  avatar        UserAvatar?
  comments      Comment[]
  reviews       Review[]
  orders        Order[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model UserAvatar {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  public_id String?
  url       String
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Video {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  url             String
  description     String
  player          String
  duration        Int?
  courseSection   CourseSection @relation(fields: [courseSectionId], references: [id], onDelete: Cascade)
  courseSectionId String        @unique @db.ObjectId
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Tag {
  id      String      @id @default(auto()) @map("_id") @db.ObjectId
  label   String
  courses CourseTag[]
}

model Link {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  text            String
  url             String
  CourseSection   CourseSection? @relation(fields: [courseSectionId], references: [id], onDelete: Cascade)
  courseSectionId String?        @db.ObjectId
}

model Comment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  text            String
  parentId        String?       @db.ObjectId
  parent          Comment?      @relation("CommentToReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies         Comment[]     @relation("CommentToReplies")
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @db.ObjectId
  courseSection   CourseSection @relation(fields: [courseSectionId], references: [id], onDelete: Cascade)
  courseSectionId String        @db.ObjectId
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Course {
  id             String               @id @default(auto()) @map("_id") @db.ObjectId
  title          String               @unique
  description    String
  price          Int
  estimatedPrice Int?
  demoUrl        String?
  level          Level
  tags           CourseTag[]
  thumbnail      CourseThumbnail?
  sections       CourseSection[]
  benefits       CourseBenefit[]
  prerequisites  CoursePrerequisite[]
  reviews        Review[]
  orders Order[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model CourseThumbnail {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  public_id String?
  url       String
  courseId  String   @unique @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Level {
  Beginner
  Intermediate
  Advanced
}

model CourseTag {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id])
  courseId String @db.ObjectId
  tag      Tag    @relation(fields: [tagId], references: [id])
  tagId    String @db.ObjectId
}

model CourseSection {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  suggestion  String?
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String    @db.ObjectId
  comments    Comment[]
  links       Link[]
  video       Video?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int      @default(1)
  text      String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseBenefit {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  text     String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String @db.ObjectId
}

model CoursePrerequisite {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  text     String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String @db.ObjectId
}

model Order {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  course    Course @relation(fields: [coursesId], references: [id])
  coursesId String @db.ObjectId
  // TODO: ADD PAYMENT INFO
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Notification {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  user      User               @relation(fields: [userId], references: [id])
  userId    String             @db.ObjectId
  title     String
  message   String
  status    NotificationStatus @default(Delivered)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

enum NotificationStatus {
  Delivered
  Seen
}
